<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="5 seconds">
    <contextName>${APP_NAME}</contextName>
    <springProperty name="APP_NAME" scope="context" source="spring.application.name"/>
    <springProperty name="LOG_FILE" scope="context" source="logging.file" defaultValue="./log/%d{yyyy-MM-dd}/${APP_NAME}"/>
    <springProperty name="LOG_MAX_FILE_SIZE" scope="context" source="logback.filesize" defaultValue="10MB"/>
    <springProperty name="LOG_MAX_HISTORY" scope="context" source="logback.filemaxday" defaultValue="60"/>
    <springProperty name="ServerIP" scope="context" source="spring.cloud.client.ip-address" defaultValue="0.0.0.0"/>
    <springProperty name="ServerPort" scope="context" source="server.port" defaultValue="0000"/>

    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wtp"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="etp"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 非彩色日志格式 PATTERN -->
    <property name="PLAIN_LOG_PATTERN"
              value="[${APP_NAME}:${ServerIP}:${ServerPort}] %d{yyyy-MM-dd HH:mm:ss.SSS} %level [%tid] ${PID} [%thread] %logger : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%etp}}"/>
    <!-- 彩色日志格式 PATTERN -->
    <property name="INFO_LOG_PATTERN"
              value="[${APP_NAME}:${ServerIP}:${ServerPort}] %clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%level){blue} %clr([%tid]){yellow} %clr(${PID}){magenta} %clr([%thread]){orange} %clr(%logger){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%etp}}"/>
    <!-- 彩色日志格式 PATTERN -->
    <property name="ERROR_LOG_PATTERN"
              value="[${APP_NAME}:${ServerIP}:${ServerPort}] %clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%level){blue} %clr([%tid]){yellow} %clr(${PID}){magenta} %clr([%thread]){orange} %clr(%logger){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%etp}}"/>
    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout">
                <pattern>[${APP_NAME}:${ServerIP}:${ServerPort}] %d{yyyy-MM-dd HH:mm:ss.SSS} %level [%tid] ${PID} [%thread] %logger : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%etp}}</pattern>
            </layout>
        </encoder>
    </appender>
    <appender name="grpc-log" class="org.apache.skywalking.apm.toolkit.log.logback.v1.x.log.GRPCLogClientAppender">
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="org.apache.skywalking.apm.toolkit.log.logback.v1.x.mdc.TraceIdMDCPatternLogbackLayout">
                <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{tid}] [%thread] %-5level %logger{36} -%msg%n</Pattern>
            </layout>
        </encoder>
    </appender>

    <!-- 生成 INFO 日志文件 -->
    <appender name="INFO_OUT" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--  <fileNamePattern>./logs/%d{yyyy-MM-dd}/info-%d{yyyy-MM-dd}-%i.log</fileNamePattern> -->
            <fileNamePattern>${LOG_FILE}-info-%i.log</fileNamePattern>
            <!-- each archived file, size max 10MB -->
            <maxFileSize>${LOG_MAX_FILE_SIZE}</maxFileSize>
            <!-- total size of all archive files, if total size > 20GB, it will delete old archived file -->
            <totalSizeCap>20GB</totalSizeCap>
            <!-- 60 days to keep -->
            <maxHistory>${LOG_MAX_HISTORY}</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout">
                <pattern>[${APP_NAME}:${ServerIP}:${ServerPort}] %d{yyyy-MM-dd HH:mm:ss.SSS} %level [%tid] ${PID} [%thread] %logger : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%etp}}</pattern>
            </layout>
        </encoder>
        <!-- 打印日志级别 -->
        <!--获取比info级别高(包括info级别)但除error级别的日志-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>DENY</onMatch>
            <onMismatch>ACCEPT</onMismatch>
        </filter>-->
    </appender>


    <!-- 日志输出级别 -->
    <root level="INFO">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="INFO_OUT"/>
        <appender-ref ref="grpc-log"/>
    </root>
    <!-- 减少nacos日志 -->
    <logger name="com.alibaba.nacos" level="ERROR"/>
    <!-- 减少netflix日志 -->
    <logger name="com.netflix.loadbalancer" level="ERROR"/>
</configuration>
